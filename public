<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>PD Calculator</title>
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: white;
        color: #2f4f4f;
    }
    .page {
        text-align: center;
        padding: 60px;
    }
    h1 {text-align: center;
    font-size: 45px;
    }
    .introbox {
        display: inline-block;
        width: 300px;
        height: 100px;
        border-radius: 30px;
        margin: 20px;
        background-color:#c0c0c0;
        color: white;
        text-align: center;
        padding: 20px;
        }
    .box {
        display: inline-block;
        width: 600px;
        height: 250px;
        border-radius: 30px;
        margin: 20px;
        background-color: #c0c0c0;
        color: white;
        text-align: center;
        padding: 20px;
    }
    .result-box {
        display: inline-block;
        width: 600px;
        height: 400px;
        border-radius: 30px;
        margin: 20px;
        background-color: #c0c0c0;
        color: white;
        text-align: center;
        padding: 20px;
    }
    .yesnobutton, .selectable-button {
        background-color: #40e0d0;
        color: white;
        border: none;
        border-radius: 30px;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: block;
        font-size: 30px;
        margin: 10px auto;
        cursor: pointer;
        width: 80%;
    }
    .button {
        background-color: #40e0d0;
        color: white;
        border: none;
        border-radius: 30px;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 30px;
        margin: 4px 2px;
        cursor: pointer;
    }
    /* Additional style for the box on agreement page */
    #agreementBox {
        width: 400px;
        height: 500px;
    }

    /* Additional style for the identification box */
    #identificationBox {
        width: 400px;
        height: 340px;
    }

    /* Additional style for the calculator page */
    #calculatorPage .box {
        width: 300px;
        height: 100px;
    }

    /* Style for the selected button */
    .selected {
        background-color: #8B0000; /* Dark red */
    }
    #questionsContainer {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding-bottom: 100px;
        min-height: 100vh;
        box-sizing: border-box;
    }
    /* Style for the question text */
    .question-text {
        font-size: 45px;
        margin-bottom: 10px; /* Add margin between question and choice buttons */
    }

    /* Style for selected choice */
    .selected-choice {
        background-color: #8B0000; /* Dark red */
        color: white;
    }
    .pagination {
    	text-align: center;
        justify-content: center;
        width: 100%;
        position: absolute;
        bottom: 0;
        }
    /*for footbar*/
    .siteFooterBar {
    position: fixed;
    bottom: 0;
    padding-top: 10px;
    width: 100%;
    color: #9B9B9B;
    background: #F3F3F3;
}

  .content {
      display: block;
      padding: 10px;
      margin: 0px auto;
      text-align: center;
      font: 25px Georgia, "Times New Roman", Times, serif;
      font-size: 14px;
      width:250px;
  }
  .content img {
   height:70px;
      width: 70px;
      float:center;
  }
         /* Responsive layout */
         @media (max-width: 600px) {
            .header {
                font-size: 20px;
                padding: 15px 0;
            }
            .button {
                padding: 12px 24px;
                font-size: 14px;
            }
        }
</style>
</head>
<body>
    <div class="page">
        <h1>혹시 나도 파킨슨병일까?</h1>
        <img src="pd_front.jpg" alt="PPD pictogram" width="140" height="130">
        <button class="button" onclick="showExplain()">알아보기</button>
    </div>

<div id="explainPage" style="display: none;">
	<div class="page">
    <h1> 무슨 검사인가요?</h1>
    <div class= 'box'>
    <p style="font-size:20px">이 검사는 검사자가 10년 뒤에 파킨슨병에 진단될 가능성이 얼마나 되는지 알아보는 파킨슨병 전구기 검사에요. </p>
    <p style="font-size:20px">2019년 국제 파킨슨 및 이상운동질환 학회에서 만든 Prodromal Parkinson’s Disease Calculator를 기반으로 제작되었답니다! </p>
    <p style="font-size:20px">이 검사 점수가 높다고 파킨슨병으로 진단되는 것은 아니지만 주변 신경과에서 정밀검사를 권장해요. </p>
    </div>
  <div class="siteFooterBar">
          <div class="content">
              <img src="mds.png" alt = "MDS logo">
          </div>
       </div>
       <button class="button" onclick="showAgreement()">다음</button>
	</div>
</div>

<div id="agreementPage" style="display: none;">
    <div class="page">
        <h1>시작하기 전에</h1>
        <div class="box" id="agreementBox">
            <h2>개인정보 수집 동의</h2>
            <p>한림대학교성심병원은(는)  개인정보보호법 제15조 및 같은 법 제22조에 근거하여, 다음과 같이 환자의 정확한 검사 및 연구을(를) 위하여 개인정보를 수집․이용하는데 동의를 받고자 합니다.</p>
<p>
1. 개인정보를 제공받는 자 : 한림대학교성심병원<br>
2. 개인정보를 제공받는 자의 개인정보 이용 목적 : 환자의 정확한 진단 및 연구 <br>
3. 제공하는 개인정보의 항목 : 성함, 성별, 나이<br>
4. 개인정보를 제공받는 자의 개인정보 보유 및 이용기간 : 수집일로부터 3년 <br>
5. 동의거부권 및 동의 거부에 따른 불이익 안내:<br>
검사 참여자은(는) 위와 같이 개인정보를 수집․이용하는 데 대한 동의를 거부할 권리가 있습니다. 그러나 동의를 거부할 경우  한림대학교성심병원에서 제공하는 전구기 파킨슨병 진단 및 관리 서비스을(를) 받을 수 없음을 참고하시기 바랍니다. </p>
            <button class="button" style="font-size:15px" onclick="showIdentification()">동의합니다</button>
            <button class="button" style="font-size:15px" onclick="notParticipate()">동의하지 않습니다</button>
        </div>
    </div>
</div>

<div id="identificationPage" style="display: none;">
    <div class="page">
        <h1>개인정보 입력</h1>
        <div class="introbox" id="identificationBox">
            <h2>인적사항</h2>
            <label for="name">이름:</label>
            <input type="text" id="name" required><br><br>
            <label for="age">나이:</label>
            년 : <select id="select_year" onchange="javascript:lastday();"></select>
            월 : <select id="select_month" onchange="javascript:lastday();"></select>
            일 : <select id="select_day"></select><br><br>

            <label for="sex">성별:</label>
            <select id="sex" required>
                <option value="male">남성</option>
                <option value="female">여성</option>
                <option value="other">그 외</option>
            </select><br><br>
            <label for="underlying">이전에 진단받은 병이 있거나 평소에 먹는 약이 있나요?(없다면 그 외에 없음 이라 적어주세요):</label><br><br>
            <input type="checkbox" id="hypertension" name="underlyingConditions" value="htn">
            <label for="htn">고혈압</label>
            <input type="checkbox" id="diabetes" name="underlyingConditions" value="dm">
            <label for="dm">당뇨</label>
            <input type="checkbox" id="hyperlipidemia"  name="underlyingConditions" value="hl">
            <label for="hl">고지혈증</label><br>
            <label for="udelse">그 외</label>
            <input type="text" id="udelse" class="underlying" name="udelse" required><br><br>
            <label for="hpnum">핸드폰(숫자만입력)</label>
            <input type="number" id="hpnum" class="underlying" name="hpnum" maxlength='11' oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);" required="required">
            <br><br>
            <button class="button" onclick="startQuestionnaire(event)">검사 시작</button>
        </div>
    </div>
</div>

<div id="calculatorPage" style="display: none;">
    <div class="page">
        <div id="survey-container">
            <div id="question" class="question-text"></div>
            <div id="choices"></div>
        </div>
        <div id="pagination">
            <button class="button" id="prevButton" style="font-size:15px" onclick="prevPage()">이전</button>
            <button class="button" id="nextButton" style="font-size:15px" onclick="nextPage()">다음</button>
        </div>
        <button class="button" id="calculateButton" style="display: none;" onclick="calculate();calculateAndSubmit();">결과 보기</button>
    </div>
</div>

<div id="resultsPage" style="display: none;">
    <div class="page">
        <h1>결과</h1>
        <div class="result-box">
            <h2>가능성점수(likelihood ratio)</h2>
            <p id="totalLR"></p>
            <h2>검사 결과</h2>
            <p id="resultMessage"></p>
            <p style="font-size:20px"> 이 검사에서 높은 점수가 나왔어도 파킨슨병이 아닐 수 있어요. 하지만 주기적으로 검사를 받으면서 일찍 질환의 증상을 알면 훨씬 건강에 좋답니다! 이 결과를 저장해서 병원에 보여드리고 싶다면 저장하기를 눌러주세요.
            <button class="button" id="savetothephone" onclick="exportSurvey()">저장하기</button>
            <a href="https://www.kmds.or.kr/hospital/">내 주변 파킨슨병 전문 병원 알아보기</a><br/><br/>
        </div>
    </div>
</div>



<script>

    var start_year = "1940";// 시작할 년도
    var today = new Date();
    var today_year = today.getFullYear();
    var index = 0;
    for (var y = start_year; y <= today_year; y++) { //start_year ~ 현재 년도
        document.getElementById('select_year').options[index] = new Option(y, y);
        index++;
    }
  
    index = 0;
    for (var m = 1; m <= 12; m++) {
        document.getElementById('select_month').options[index] = new Option(m, m);
        index++;
    }

    lastday();

    function lastday() { //년과 월에 따라 마지막 일 구하기 
        var Year = document.getElementById('select_year').value;
        var Month = document.getElementById('select_month').value;
        var day = new Date(new Date(Year, Month, 1) - 86400000).getDate();
        /* = new Date(new Date(Year,Month,0)).getDate(); */

        var dayindex_len = document.getElementById('select_day').length;
        if (day > dayindex_len) {
            for (var i = (dayindex_len + 1); i <= day; i++) {
                document.getElementById('select_day').options[i - 1] = new Option(i, i);
            }
        }
        else if (day < dayindex_len) {
            for (var i = dayindex_len; i >= day; i--) {
                document.getElementById('select_day').options[i] = null;
            }
        }
    }

let db;
let selectedChoices = [];
let surveyId;
let qnum = 0; // Start with the first question

const initializeDatabase = require('../db.js');

// Initialize the database connection
async function initialize() {
    try {
        db = await initializeDatabase();
        startSurveyAndGetFirstQuestion();
    } catch (error) {
        console.error('Failed to initialize database:', error);
    }
}

function showExplain() {
    document.querySelector('.page').style.display = 'none'; // Hide the initial welcome page
    document.getElementById('explainPage').style.display = 'block'; // Show the explain page
}

function showAgreement() {
    document.getElementById('explainPage').style.display = 'none';
    document.getElementById('agreementPage').style.display = 'block';
}

function notParticipate() {
    document.getElementById('agreementPage').style.display = 'none';
    document.getElementById('disagreementPage').style.display = 'block'
}

function showIdentification() {
    document.getElementById('agreementPage').style.display = 'none';
    document.getElementById('identificationPage').style.display = 'block';
}

function startQuestionnaire(event) {

    var hpnum = document.getElementById('hpnum').value;
    if (hpnum == null || hpnum == "") {
        alert("핸드폰번호는 필수입니다.(숫자로입력)");
        return;
    }
    if (hpnum.length > 11) {
        alert("핸드폰번호는 11자리이상으로 입력 불가능합니다.");
        return;
    }
   
    var year = document.getElementById('select_year').value;
    var month = document.getElementById('select_month').value;
    var day = document.getElementById('select_day').value;

    var today = new Date();
    var birthDate = new Date(year, month - 1, day); // month is 0-indexed in JavaScript Date

    var age = today.getFullYear() - birthDate.getFullYear();
    var monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }

    console.log("Calculated age:", age);

    document.getElementById('identificationPage').style.display = 'none';
    document.getElementById('calculatorPage').style.display = 'block';


    if (event) {
        event.preventDefault();
    }    
    const url = `http://localhost:3000/start-Questionnaire/q/${qnum}`;
    const method = 'POST';
    const headers = {
        'Content-Type': 'application/json',
    };
    let body = {};
  
    if (qnum === 0) {
        // For the first question, send the initial survey data
        var udcheckbox = document.getElementsByName('underlyingConditions');
        let checkedConditions = [];
        for (var i = 0; i < udcheckbox.length; i++) {
            if (udcheckbox[i].checked) {
                checkedConditions.push(udcheckbox[i].value);
            }
        }
        const otherCondition = document.getElementById('udelse').value.trim();
    
        let underlyingConditions = [...checkedConditions];
        if (otherCondition && otherCondition.toLowerCase() !== '없음') {
            underlyingConditions.push(otherCondition);
        }
        
        if (underlyingConditions.length === 0) {
            underlyingConditions.push('없음');
        }

        body = {
            name: document.getElementById('name').value,
            age: age,
            sex: document.getElementById('sex').value,
            id: document.getElementById('hpnum').value,
            underlyingConditions: underlyingConditions
        };
        qnum++;
    } else {
    // For subsequent questions, send the surveyId
    body = { surveyId: surveyId ,qum :qum };
    }

    fetch(url, {
        method: method,
        headers: headers,
        body: JSON.stringify(body)
    })
.then(response => {
    if (!response.ok) {
        throw new Error('Network response was not ok');
    }
    return response.json();
})
.then(data => {
   
    if (data.question) {
        displayQuestion(data);
        // Save the surveyId for subsequent requests
        surveyId = data.surveyId;
       
    } else {
       
        //No more questions - lead to finish survey
        finishSurvey();
    }
})
.catch(error => {
    console.error('There was a problem with your fetch operation:', error);
});
}


function displayQuestion(data) {
        
    // Update your HTML to display the question and choices
    document.getElementById('question').textContent = data.question;
    // Clear previous choices
    const choicesContainer = document.getElementById('choices');
    choicesContainer.innerHTML = '';
    if (data.qnum === 21) {
        // UPDRS question
        if (data.updrsQuestions && Array.isArray(data.updrsQuestions)) {
            data.updrsQuestions.forEach(q => {
                const button = document.createElement('button');
                button.textContent = q.main_q_text;
                button.className = 'selectable-button';
                button.dataset.index = q.question_index;
                button.dataset.weight = q.choice_yes_weight;
                button.onclick = () => toggleUPDRSChoice(button);
                choicesContainer.appendChild(button);
            });
        } else {
            console.error('UPDRS questions data is missing or invalid');
        }
    } else {
        if (data.choices && typeof data.choices === 'object') {
            Object.entries(data.choices).forEach(([choice, weight]) => {
                const button = document.createElement('button');
                button.textContent = `${choice}`;
                button.className = 'selectable-button';
                button.onclick = () => handleAnswer(choice, weight);
                choicesContainer.appendChild(button);
            });
        } else {
            console.error('Choices data is missing or invalid');
        }
    }
    
    if (data.isLastQuestion) {
        document.getElementById('nextButton').textContent = '결과 보기';
    } else {
        document.getElementById('nextButton').textContent = '다음';
    }
}

function toggleUPDRSChoice(button) {
    button.classList.toggle('selected');
}

async function handleAnswer(choice, weight) {
    // Store the selected choice
    selectedChoices.push({ questionNumber: qnum, choice, weight });
    console.log(`Question ${qnum}: User chose ${choice} with weight ${weight}`);

    // Fetch the next question
    await nextPage();
}

async function nextPage() {
  
    if (qnum === 21) {
        const selectedButtons = document.querySelectorAll('#choices .selectable-button.selected');
        selectedChoices = Array.from(selectedButtons).map(btn => ({
            questionNumber: 21,
            choice: btn.dataset.index,
            weight: btn.dataset.weight
        }));
    }

    const response = await fetch('/nextPage', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
            surveyId: surveyId, 
            qnum: qnum, 
            choices: selectedChoices 
        })
    });
    const data = await response.json();
    
    if (data.message === 'Survey completed') {
       // Hide the calculatorPage
       document.getElementById('calculatorPage').style.display = 'none';
        
       // Show the resultsPage
       document.getElementById('resultsPage').style.display = 'block';
       
       // Fetch and display the results
       fetchResults();
    } else {
        
        qnum = data.qnum;
        displayQuestion(data);
    }
}

async function prevPage() {
    
    const response = await fetch('/prevPage', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
            surveyId: surveyId, 
            qnum: qnum , 
            choices: selectedChoices 
        })
    });
    const data = await response.json();
    if (data.error) {
        alert(data.error);
    } else {
       
        qnum = data.qnum;
        displayQuestion(data);
    }
}


    async function fetchResults() {
    try {
        const response = await fetch(`/resultsPage?surveyId=${surveyId}`);
        const data = await response.json();
        
        // Update the results page with the data
        document.getElementById('totalLR').textContent = data.totalLR.toFixed(2);
        document.getElementById('resultMessage').textContent = data.resultMessage;
        // Show the results page
        document.getElementById('resultsPage').style.display = 'block';

    } catch (error) {
        console.error('Error fetching results:', error);
        alert('Failed to fetch results. Please try again.');
    }
}
   


function exportSurvey(surveyId) {
    fetch(`/export-survey/${surveyId}`)
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => { throw new Error(err.error + ': ' + err.details) });
            }
            return response.blob();
        })
        .then(blob => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `survey_${surveyId}_${Date.now()}.xlsx`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to export survey: ' + error.message);
        });
}

</script>
</body>
</html>
